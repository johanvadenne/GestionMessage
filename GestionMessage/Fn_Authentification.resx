<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMS0pPjItKf8xLCj7MSwo+zItKf8xLSk+AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxLSk+Mi0p/zEsKPsxLCj7Mi0p/zEt
        KT4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEtKT4yLSn/MSwo+zIt
        KPkyLSn/Mi8rQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMi8rQTIt
        Kf8yLSj5Miwp6jItKf8xLidTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAxLidTMi0p/zIsKeoxLSjJMi0p/zItKXoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADItKXoyLSn/MSwoyTEsKZQyLSn/MSwovQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMSwovTItKf8xLCmUMywoRTItKf8yLSn9Ly8pKwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADUvKSsyLSn9Mi0p/zMsKEUAAAACMSwp0zItKf8xLCjJMzMzCgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzMKMSwoyTItKf8xLCnTAAAAAgAAAAAzLio8MSwo+zIt
        Kf8xLCjIMCoqKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCoqKjEsKMgyLSn/MSwo+zMuKjwAAAAAAAAAAAAA
        AAAyLShfMSwo+zItKf8yLSn9MiwouzEsKHczLSlPMi0pPTEsKDkxLCg5MSwoOTEsKDkxLCg5MSwoOTEs
        KDkxLCg5MSwoOTEsKDkxLCg5MSwoOTItKT0wLSlPMS0pdjItKboyLSn9Mi0p/zEsKPsyLShfAAAAAAAA
        AAAAAAAAAAAAAAAAAAAyLSk9Miwo1DItKf8yLSn/Mi0p/zItKf8yLSn/Mi0p/zItKf8yLSn/Mi0p/zIt
        Kf8yLSn/Mi0p/zItKf8yLSn/Mi0p/zItKf8yLSn/Mi0p/zItKf8yLSn/Mi0p/zItKf8yLCjUMi0pPQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMi4nRzEsKJYyLSnLMS0p7DEsKfwyLSn/Mi0p/zIt
        Kf8yLSn/Mi0p/zItKf8yLSn/Mi0p/zItKf8yLSn/Mi0p/zItKf8xLCj8MS0p7DItKcwxLSiWMi4nRwAA
        AAIAAAAAAAAAAAAAAAAAAAAA//gf///wD///8A///+GH//gBgD/gA8APwAfgA4H//wEH///hD///8B//
        //Af///4H///+B////gf///4H///+B8MMPgfDDD4Hwww+B/ee/gf///4H///+B////gf///4H///+B//
        //gP///wB///4IP//8HAAAAD4AAAB/AAAA8=
</value>
  </data>
</root>